services:
  # Next.js CMS Application
  cms-app:
    build:
      context: ./apps/cms
      dockerfile: Dockerfile
      args:
        - STAGE=development
        - AUTH_URL=http://localhost:3000
        - NEXT_PUBLIC_APP_URL=http://localhost:3000
        - AUTH_SECRET=TsV7D4wQZBEzQ6JIlXxifJl0/5YAarRyfFkDiDrfsj/UbzlXf0/sTRkcTbc=
        - AUTH_TRUST_HOST=true
        - SKIP_ENV_VALIDATION=false
        - NEXT_TELEMETRY_DISABLED=1
    container_name: cms-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_DIRECTUS_URL=http://localhost:8055
      - DIRECTUS_URL=http://directus:8055
      - AUTH_SECRET=TsV7D4wQZBEzQ6JIlXxifJl0/5YAarRyfFkDiDrfsj/UbzlXf0/sTRkcTbc=
      - AUTH_URL=http://localhost:3000
      - AUTH_TRUST_HOST=true
      - STAGE=development
      - SKIP_ENV_VALIDATION=false
      - NEXT_TELEMETRY_DISABLED=1
    # env_file:
    #   - ./apps/cms/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      directus:
        condition: service_healthy
    networks:
      - cms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Directus CMS Backend
  directus:
    image: directus/directus:latest
    container_name: directus
    ports:
      - "8055:8055"
    env_file:
      - ./apps/directus/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:8055/server/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  directus-cms-template:
    build:
      context: ./apps/directus_cms_template
      dockerfile: Dockerfile
    container_name: directus_template
    env_file:
      - ./apps/directus_cms_template/.env
    depends_on:
      directus:
        condition: service_healthy
    networks:
      - cms-network
    restart: "no"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - ./apps/postgres/.env
    networks:
      - cms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    env_file:
      - ./apps/redis/.env
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - cms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.29.1-alpine-slim
    env_file:
      - ./apps/nginx/.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./apps/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./apps/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - cms-app
      - directus
    networks:
      - cms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
  redis-data:
  directus-uploads:
  directus-database:
  directus-migrations:
  nginx-cache:
  nginx-logs:

networks:
  cms-network:
    driver: bridge